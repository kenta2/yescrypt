.TH "NaCl" "1" 
.SH "NAME" 
CurveCP \(em Message-handling programs 
.SH "SYNOPSIS" 
.PP 
\fBcurvecpserver\fR [\fB-q \fI(optional)\fR\fP]  [\fB-Q \fI(optional)\fR\fP]  [\fB-v \fI(optional)\fR\fP]  [\fB-c n\fI(optional)\fR\fP]  [sname]  [keydir]  [ip]  [port]  [ext]  [prog]  
.SH "DESCRIPTION" 
.PP 
This manual page documents briefly the  
\fBCurveCP\fR commands. 
.PP 
A traditional UNIX-style server such as ftpd handles just  
one network connection, reading input from stdin and writing output 
to stdout. A "superserver" such as inetd or tcpserver listens for  
network connections and starts a separate server process for  
each connection. 
.PP 
The \fBCurveCP\fR command-line tools have 
an extra level of modularity. The \fBcurvecpserver\fR  superserver listens for network connections. For each connection,  
\fBcurvecpserver\fR starts the  
\fBcurvecpmessage\fR message handler;  
\fBcurvecpmessage\fR then starts a server such as ftpd. 
Then ftpd sends a stream of data to \fBcurvecpmessage\fR,  
which in turn sends messages to \fBcurvecpserver\fR,  
which encrypts and authenticates the messages and sends them inside 
network packets. At the same time \fBcurvecpclient\fR receives network packets, verifies and decrypts messages inside the  
packets, and passes the messages to \fBcurvecpmessage\fR; 
\fBcurvecpmessage\fR sends a stream of data to ftpd.  
The same curvecpmessage tool is also used by  
\fBcurvecpclient\fR. 
.PP 
\fBcurvecpserver\fR and  
\fBcurvecpclient\fR can use programs other than  
\fBcurvecpmessage\fR. Those programs can directly 
generate messages in the CurveCP message format without talking to  
separate tools such as ftpd; or they can support a completely  
different protocol that reuses CurveCP's cryptographic layer  
but transmits different kinds of messages. 
.PP 
This page explains what programmers have to do to write  
\fBcurvecpmessage\fR replacements that talk to  
\fBcurvecpserver\fR and  
\fBcurvecpclient.\fR 
.SH "Incoming messagess" 
.PP 
File descriptor 8 is a pipe. Read from this pipe a length 
byte n, between 1 and 68, and a 16*n-byte message. Repeat.  
The pipe is set to non-blocking mode; be prepared for EAGAIN 
and EWOULDBLOCK, even in the middle of a message. 
.PP 
This pipe reading must always be active. The  
\fBcurvecpclient\fR and  
\fBcurvecpserver\fR programs assume that every 
message is read immediately. If you can't handle a message 
immediately, read it and put it onto a queue. If you don't 
have queue space, throw the message away; this shouldn't cause 
trouble, since you have to be able to handle missing 
messages in any case. 
.SH "Outgoing messagess" 
.PP 
File descriptor 9 is a pipe. Write to this pipe a length 
byte n, between 1 and 68, and a 16*n-byte message. Repeat. 
The pipe is set to non-blocking mode; be prepared for EAGAIN 
and EWOULDBLOCK, even in the middle of a message. 
.PP 
As a client, do not use length bytes above 40 until a message 
has arrived from the server. (The messages inside CurveCP 
Initiate packets are limited to 640 bytes.) 
.PP 
The CurveCP server does not start until it has received 
a message from the client. Furthermore, the CurveCP server 
must receive this message within 60 seconds of the client 
starting up. (The CurveCP Initiate packet is valid for only 
60 seconds after the corresponding CurveCP Cookie packet.) 
This does not mean that the client must start sending 
messages immediately, but it does mean that waiting for 
more than a second to send a message is a bad idea. 
.SH "OPTIONS" 
.PP 
How to use \fBcurvecpserver\fR: 
.IP "\fB-q\fP           \fBoptional\fP         " 10 
no error messages 
.IP "\fB-Q\fP           \fBoptional\fP         " 10 
print error messages (default) 
.IP "\fB-v\fP           \fBoptional\fP         " 10 
print extra information 
.IP "\fB-c n\fP           \fBoptional\fP         " 10 
allow at most n clients at once (default 100) 
.IP "\fBsname\fP         " 10 
server's name 
.IP "\fBkeydir\fP         " 10 
use this public-key directory 
.IP "\fBip\fP         " 10 
server's IP address 
.IP "\fBport\fP         " 10 
server's UDP port 
.IP "\fBext\fP         " 10 
server's extension 
.IP "\fBprog\fP         " 10 
run this server 
.SH "SEE ALSO" 
.PP 
curvecpmessage (1), curvecpclient (1), inetd (8), tcpserver (1). 
.SH "AUTHOR" 
.PP 
This manual page was written by Sergiusz Pawlowicz debian@pawlowicz.name for 
the \fBDebian\fP system (and may be used by others). The source 
of this page is a webpage http://curvecp.org/messageapi.html . 
Permission is granted to copy, distribute and/or modify this 
document under public domain. 
 
.PP 
This manual page was rewritten for the \fBDebian\fP distribution 
because the original program does not have a manual page. 
.\" created by instant / docbook-to-man, Sat 14 Jan 2012, 02:59 
